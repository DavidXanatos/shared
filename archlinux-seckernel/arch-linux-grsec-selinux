#!/bin/sh
# Build linux-grsec package for ArchLinux with SELinux

# Download Archive from AUR and extract it in a temporary folder
TEMP_DIR="${TEMP_DIR:-/tmp/makepkg-$(id -nu)/linux-grsec-selinux}"

# Save current path
cd "$(dirname -- "$0")" || exit $?
SCRIPT_DIRECTORY="$(pwd -P)"

# Work in temporary directory
[ -d "$TEMP_DIR" ] || mkdir -p "$TEMP_DIR"
if ! cd "$TEMP_DIR"
then
    echo >&2 "Failed to go into $TEMP_DIR"
    exit 1
fi

# If PKGBUILD is recent enough, don't download the package again
if ! (find PKGBUILD -type f -mtime -1 2> /dev/null |grep -q PKGBUILD)
then
    echo >&2 "Download linux-grsec from the ABS"
    # Recreate the building directory
    rm -f ./*
    rsync -mrtv --no-motd --no-p --no-o --no-g "rsync.archlinux.org::abs/$(uname -m)/community/linux-grsec/." .
    touch PKGBUILD
fi

# Patches to source code fail if they were already applied
rm -rf src

# Replace the base pkgname with a custom one
sed -i 's/^pkgbase=.*/pkgbase=linux-grsec-selinux/' PKGBUILD

# Update kernel configuration
# Please read README.rst file for more information.
for CONFIG_FILE in config config.x86_64
do
    if [ ! -r "$CONFIG_FILE" ]
    then
        echo >&2 "Unable to read $CONFIG_FILE. Aborting"
        exit 1
    fi
    OLD_SIG=$(sha256sum "$CONFIG_FILE" |cut -d\  -f1)
    if ! grep -q 'CONFIG_SECURITY_SELINUX=y' < "$CONFIG_FILE"
    then
        cat >> "$CONFIG_FILE" << EOF
CONFIG_AUDIT=y
CONFIG_AUDITSYSCALL=y
CONFIG_AUDIT_WATCH=y
CONFIG_AUDIT_TREE=y
CONFIG_NETLABEL=y
CONFIG_IP_NF_SECURITY=m
CONFIG_IP6_NF_SECURITY=m
CONFIG_NETFILTER_XT_TARGET_AUDIT=m
CONFIG_FANOTIFY_ACCESS_PERMISSIONS=y
CONFIG_NFSD_V4_SECURITY_LABEL=y
CONFIG_SECURITY=y
CONFIG_SECURITY_NETWORK=y
# CONFIG_SECURITY_NETWORK_XFRM is not set
CONFIG_SECURITY_PATH=y
CONFIG_LSM_MMAP_MIN_ADDR=65536
CONFIG_SECURITY_SELINUX=y
CONFIG_SECURITY_SELINUX_BOOTPARAM=y
CONFIG_SECURITY_SELINUX_DISABLE=y
CONFIG_SECURITY_SELINUX_DEVELOP=y
CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE=1
CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE=1
CONFIG_SECURITY_SELINUX_ENABLE_SECMARK_DEFAULT=y
CONFIG_SECURITY_SELINUX_AVC_STATS=y
# CONFIG_SECURITY_SELINUX_POLICYDB_VERSION_MAX is not set
# CONFIG_SECURITY_SMACK is not set
# CONFIG_SECURITY_TOMOYO is not set
# CONFIG_SECURITY_APPARMOR is not set
# CONFIG_INTEGRITY is not set
# CONFIG_IMA is not set
# CONFIG_EVM is not set
CONFIG_DEFAULT_SECURITY_SELINUX=y
# CONFIG_DEFAULT_SECURITY_YAMA is not set
# CONFIG_DEFAULT_SECURITY_DAC is not set
CONFIG_DEFAULT_SECURITY="selinux"
EOF
    fi

    NEW_SIG=$(sha256sum "$CONFIG_FILE" |cut -d\  -f1)
    if [ "$OLD_SIG" != "$NEW_SIG" ]
    then
        echo >&2 "File $CONFIG_FILE has been updated, updating PKGBUILD sha256sum"
        sed "s/$OLD_SIG/$NEW_SIG/" -i PKGBUILD
    fi
done

# Add custom patches
for SRCPATCH in "$SCRIPT_DIRECTORY/kernel-patches/"*.patch
do
    [ -e "$SRCPATCH" ] || continue
    DSTPATCH="custom-${SRCPATCH##*/}"
    if ! cp -vf "$SRCPATCH" "$DSTPATCH"
    then
        echo >&2 "Failed to copy $DSTPATCH"
        exit 1
    fi
    # Add the patch to the PKGBUILD
    if ! grep -q "source+=('$DSTPATCH')" PKGBUILD
    then
        echo "source+=('$DSTPATCH')" >> PKGBUILD
        echo "sha256sums+=('SKIP')" >> PKGBUILD
    fi
done

# Apply PKGBUILD.patch, but not twice
# Patch created with "diff -aNpu PKGBUILD{.orig,}" and a custom git-like header
if ! grep -q '# Add custom patches' PKGBUILD
then
    if ! patch -p1 < "$SCRIPT_DIRECTORY/PKGBUILD.patch"
    then
        echo >&2 "Failed to patch PKGBUILD"
        exit 1
    fi
fi

# Rename the install script
if [ ! -r linux-grsec-selinux.install ]
then
    if ! mv -v linux-grsec.install linux-grsec-selinux.install
    then
        echo >&2 "Failed to rename linux-grsec.install to linux-grsec-selinux.install"
        exit 1
    fi
fi

# Configure make variables
MAKEFLAGS=${MAKEFLAGS:--j3}
export MENUCONFIG MAKEFLAGS

# Build and install package.  Uncomment the second line to customize configuration
makepkg -C --nobuild || exit $?
#make -C src/linux-*/ nconfig || exit $?
makepkg -i --noextract --noprepare || exit $?

echo "To reinstall the packages, run 'cd $TEMP_DIR && makepkg -i'"
echo "Any time, to may delete $TEMP_DIR"
