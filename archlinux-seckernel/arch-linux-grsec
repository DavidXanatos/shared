#!/bin/sh
# Build linux-grsec package for ArchLinux

# Download Archive from AUR and extract it in a temporary folder
ARCHIVE='linux-grsec.tar.gz'
AUR_URL='https://aur.archlinux.org/packages/li/linux-grsec/linux-grsec.tar.gz'
TEMP_DIR="${TEMP_DIR:-/tmp/linux-grsec-build}"

# Save current path
cd $(dirname $0)
SCRIPT_DIRECTORY="$(pwd -P)"

# Work in temporary directory
[ -d "$TEMP_DIR" ] || mkdir -p "$TEMP_DIR"
if ! cd "$TEMP_DIR"
then
    echo >&2 "Failed to go into $TEMP_DIR"
    exit 1
fi

# If ARCHIVE is recent enougth, don't download it again
if ! (find "$ARCHIVE" -type f -mtime -1 2> /dev/null |grep -q "$ARCHIVE")
then
    echo >&2 "Download $ARCHIVE"
    rm -f "$ARCHIVE"
    if [ -e linux-grsec ]
    then
        if [ -e OLD-linux-grsec ]
        then
            echo >&2 "$TEMP_DIR/OLD-linux-grsec already exist"
            echo >&2 "failed to backup existing linux-grsec directory"
            exit 1
        fi
        mv linux-grsec OLD-linux-grsec
    fi
    wget -O "$ARCHIVE" "$AUR_URL"
    touch "$ARCHIVE"
fi

# Patches to source code fail if they were already applied
rm -rf linux-grsec/src

# Extract AUR package
if [ ! -d linux-grsec ] && ! tar -xzf "$ARCHIVE"
then
    echo >&2 "Failed to extract $ARCHIVE"
    exit 1
fi

if ! cd linux-grsec
then
    echo >&2 "Failed to go into linux-grsec"
    exit 1
fi

# Update kernel configuration
# Please read README.rst file for more information.
for CONFIG_FILE in config.i686 config.x86_64
do
    OLD_SIG=$(sha256sum "$CONFIG_FILE" |cut -d\  -f1)
    sed 's/CONFIG_GRKERNSEC_SYSFS_RESTRICT=.*/# CONFIG_GRKERNSEC_SYSFS_RESTRICT is not set/' -i "$CONFIG_FILE"
    sed 's/^.*CONFIG_DEFAULT_MMAP_MIN_ADDR=.*/CONFIG_DEFAULT_MMAP_MIN_ADDR=65536/' -i "$CONFIG_FILE"
    if ! grep -q 'CONFIG_SECURITY_SELINUX=y' < "$CONFIG_FILE"
    then
        cat >> "$CONFIG_FILE" << EOF
CONFIG_SECURITY_SELINUX=y
CONFIG_SECURITY_SELINUX_BOOTPARAM=y
CONFIG_SECURITY_SELINUX_DISABLE=y
CONFIG_SECURITY_SELINUX_DEVELOP=y
CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE=1
CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE=1
CONFIG_SECURITY_SELINUX_ENABLE_SECMARK_DEFAULT=y
CONFIG_SECURITY_SELINUX_AVC_STATS=y
CONFIG_SECURITY_SELINUX_POLICYDB_VERSION_MAX=n
CONFIG_LSM_MMAP_MIN_ADDR=65536
CONFIG_DEFAULT_SECURITY_SELINUX=y
EOF
    fi

    # Configure fbcondecor too
    sed 's/CONFIG_FIRMWARE_EDID=.*/# CONFIG_FIRMWARE_EDID is not set/' -i "$CONFIG_FILE"
    sed 's/CONFIG_FB_TILEBLITTING=.*/# CONFIG_FB_TILEBLITTING is not set/' -i "$CONFIG_FILE"
    sed 's/^.*CONFIG_FB_UVESA.*/CONFIG_FB_UVESA=y/' -i "$CONFIG_FILE"
    sed 's/CONFIG_FRAMEBUFFER_CONSOLE_ROTATION=.*/# CONFIG_FRAMEBUFFER_CONSOLE_ROTATION is not set/' -i "$CONFIG_FILE"
    if ! grep -q 'CONFIG_FB_CON_DECOR=y' < "$CONFIG_FILE"
    then
        echo 'CONFIG_FB_CON_DECOR=y' >> "$CONFIG_FILE"
    fi

    NEW_SIG=$(sha256sum "$CONFIG_FILE" |cut -d\  -f1)
    if [ "$OLD_SIG" != "$NEW_SIG" ]
    then
        echo >&2 "File $CONFIG_FILE has been updated, update PKGBUILD"
        sed "s/$OLD_SIG/$NEW_SIG/" -i PKGBUILD
    fi
done

# Add custom patches
for PATCH in bugon-add-null-timer.patch usr-bin-usermode-helper.patch
do
    if [ ! -e "$PATCH" ] && ! cp "$SCRIPT_DIRECTORY/$PATCH" "$PATCH"
    then
        echo >&2 "Failed to copy $PATCH"
        exit 1
    fi
done

# Don't apply PKGBUILD.patch twice
if ! grep -q 'bugon-add-null-timer.patch' PKGBUILD
then
    if ! patch -p1 < "$SCRIPT_DIRECTORY/PKGBUILD.patch"
    then
        echo >&2 "Failed to patch PKGBUILD"
        exit 1
    fi
fi

# Configure make variables
MENUCONFIG=${MENUCONFIG:-0}
MAKEFLAGS=${MAKEFLAGS:--j3}
export MENUCONFIG MAKEFLAGS

# From now, every line must succeed
set -e
set -x
makepkg
yaourt -U linux-grsec*.pkg.tar.xz
set +x

# Remove Old things
cd ..
! [ -e OLD-linux-grsec ] || rm -rf OLD-linux-grsec
! [ -e "OLD-$ARCHIVE" ] || rm -rf "OLD-$ARCHIVE"

echo "You may now save $TEMP_DIR/linux-grsec/src/linux-*/.config and remove $TEMP_DIR"
