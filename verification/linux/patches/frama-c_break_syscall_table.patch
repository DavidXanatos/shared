Frama-C complains about conflicting syscall types:

[kernel] user error: Incompatible declaration for sys_sigreturn:
                     different type constructors: long vs. void
                     First declaration was at  src-linux-3.17.1/arch/x86/um/signal.c:465
                     Current declaration is at arch/x86/include/generated/asm/syscalls_32.h:110

Replace the syscall declarations with fake ones returning -ENOSYS.
This makes UML no longer works, but Frama-C can verify things in the C code.

--- a/arch/x86/um/sys_call_table_32.c
+++ b/arch/x86/um/sys_call_table_32.c
@@ -4,9 +4,12 @@
  */
 
 #include <linux/linkage.h>
+#include <linux/errno.h>
 #include <linux/sys.h>
 #include <linux/cache.h>
 #include <generated/user_constants.h>
+#include <asm/unistd.h>
+#include <asm/ptrace.h>
 
 #define __NO_STUBS
 
@@ -24,6 +27,29 @@
 
 #define old_mmap sys_old_mmap
 
+#ifdef __FRAMAC__
+/* This breaks things but there is no easy way to declare syscalls with their
+ * exact prototypes.
+ * Moreover, arch/x86/um/shared/sysdep/syscalls_32.h requires a specific type.
+ */
+#define __SYSCALL_I386(nr, sym, compat) \
+	static long sym##__syscall_handler(struct pt_regs regs) { \
+		return -ENOSYS; \
+	}
+#include <asm/syscalls_32.h>
+__SYSCALL_I386(-1, sys_ni_syscall, sys_ni_syscall)
+
+#undef __SYSCALL_I386
+#define __SYSCALL_I386(nr, sym, compat) [nr] = sym##__syscall_handler,
+typedef long syscall_handler_t(struct pt_regs);
+
+syscall_handler_t *const sys_call_table[] = {
+	[0 ... __NR_syscall_max] = &sys_ni_syscall__syscall_handler,
+#include <asm/syscalls_32.h>
+};
+
+#else /* __FRAMAC__ */
+
 #define __SYSCALL_I386(nr, sym, compat) extern asmlinkage void sym(void) ;
 #include <asm/syscalls_32.h>
 
@@ -43,4 +69,6 @@ const sys_call_ptr_t sys_call_table[] __
 #include <asm/syscalls_32.h>
 };
 
+#endif /* __FRAMAC__ */
+
 int syscall_table_size = sizeof(sys_call_table);
