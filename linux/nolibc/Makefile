include ../../linux-flags.mk

GREP ?= grep
MKDIR ?= mkdir
SED ?= sed
SH ?= sh
WGET ?= wget

# Disable some features because linking is done without the standard library
NOLIBC_CFLAGS := -fno-builtin -fno-stack-protector
NOLIBC_LDFLAGS := -nostdlib -e _start

# Use custom include dir if it exists
CFLAGS += $(shell [ -d include ] && echo '-I./include')

# Compile a shared object because there is no need of ld.so on Intel architecture.
# However, some ARM compilers rely on ld.so to remap offsets when doing ASLR, so
# whitelist some known-to-work compilers, such as arm-none-eabi-gcc (bare metal).
ifeq ($(shell $(CC) -E -v - < /dev/null 2>&1 > /dev/null | $(GREP) -qi "^Target:\s*\(i.86\|x86\|arm-none-\)" && echo y),y)
CFLAGS += -fPIC
LDFLAGS += -fPIC -shared
else
CFLAGS += -fPIE
LDFLAGS += -fPIE -pie
endif

# Files
SOURCES := $(wildcard *.c)
HEADERS := $(wildcard *.h)
BINARIES := $(SOURCES:%.c=%.$(BIN_EXT))

all: $(BINARIES)

clean:
	rm -f *.bin *.o

# Test shellcode separately
test: all
	@for P in $(sort $(filter-out shellcode.$(BIN_EXT), $(BINARIES))); do \
		echo ./$$P && ./$$P || exit $$? ; \
	done && \
	echo ./shellcode.$(BIN_EXT) && \
	(echo 'echo $$0 && set && exit' | ./shellcode.$(BIN_EXT))

%.$(BIN_EXT): %.o
	$(CC) $(LDFLAGS) $(NOLIBC_LDFLAGS) -o $@ $^

%.o: %.c
	$(CC) $(CFLAGS) $(NOLIBC_CFLAGS) $(CPPFLAGS) -c -o $@ $<

# Make an "include" directory, when no system header is available
INCLUDE_ARCH := arm i386 x86_64
INCLUDE_ASMDIRS := include/asm $(INCLUDE_ARCH:%=include/asm-%)
INCLUDE_FILES := $(INCLUDE_ASMDIRS:%=%/unistd.h) include/sys/utsname.h
LINUX_URL := https://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/plain

create_include: $(INCLUDE_FILES)

include/asm/unistd.h: Makefile
	$(MKDIR) -p $(@D)
	echo '/* THIS FILE IS AUTOMATICALLY GENERATED BY Makefile */' > $@
	echo '/* Include the arch-specific unistd.h file */' >> $@
	echo '#if defined __arm__' >> $@
	echo '#include "../asm-arm/$(@F)"' >> $@
	echo '#elif defined __i386__' >> $@
	echo '#include "../asm-i386/$(@F)"' >> $@
	echo '#elif defined __x86_64__' >> $@
	echo '#include "../asm-x86_64/$(@F)"' >> $@
	echo '#endif' >> $@

# Download ARM kernel header
include/asm-arm/unistd.h:
	$(MKDIR) -p $(@D)
	$(WGET) -q -O $@ $(LINUX_URL)/arch/$(@D:include/asm-%=%)/include/uapi/asm/$(@F) || (rm $@ ; false)

# Build x86 syscall tables using script "syscallhdr.sh" from the kernel
include/syscall-x86/%:
	$(MKDIR) -p $(@D)
	$(WGET) -q -O $@ $(LINUX_URL)/arch/x86/syscalls/$(@F) || (rm $@ ; false)

include/asm-i386/unistd.h: include/syscall-x86/syscall_32.tbl include/syscall-x86/syscallhdr.sh
	$(MKDIR) -p $(@D)
	$(SH) include/syscall-x86/syscallhdr.sh '$<' '$@' 'common,i386' '' ''

include/asm-x86_64/unistd.h: include/syscall-x86/syscall_64.tbl include/syscall-x86/syscallhdr.sh
	$(MKDIR) -p $(@D)
	$(SH) include/syscall-x86/syscallhdr.sh '$<' '$@' 'common,64' '' ''

# Build sys/utsname.h file from linux/utsname.h kernel header
include/sys/linux_utsname.h:
	$(MKDIR) -p $(@D)
	$(WGET) -q -O $@ $(LINUX_URL)/include/uapi/linux/utsname.h || (rm $@ ; false)

include/sys/utsname.h: include/sys/linux_utsname.h
	$(SED) 's/struct new_utsname/struct utsname/' < $< > $@

.PHONY: all all32 all64 clean test create_include
